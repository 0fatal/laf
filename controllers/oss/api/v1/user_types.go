/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// UserSpec defines the desired state of User
type UserSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Provider name of a oss store. It's read-only after creation.
	// The controller will create the corresponding storage resources based on this provider.
	//+kubebuilder:validation:Required
	Provider string `json:"provider"`

	// Region of oss store. It's read-only after creation.
	// The controller will create the corresponding storage resources based on this region.
	//+kubebuilder:validation:Required
	Region string `json:"region"`

	// AccessKey for this user. It's read-only after creation.
	// This field is used to specify the user's access Key. This key is used to access OSS.
	// If you do not specify an accesskey, the accessKey will be automatically generated by Controller.
	//+optional
	AccessKey string `json:"accessKey,omitempty"`

	// SecretKey for this user. It's read-only after creation.
	// This field is used to specify the user's secret Key. This key is used to access OSS.
	// If you do not specify an secretkey, the secretKey will be automatically generated by Controller.
	//+optional
	SecretKey string `json:"secretKey,omitempty"`

	// Capacity that user desired.
	Capacity UserCapacity `json:"capacity,omitempty"`
}

// UserStatus defines the observed state of User
type UserStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// The user's capacity observed by the controller.
	Capacity UserCapacity `json:"usedCapacity,omitempty"`
}

// UserCapacity is used to obtain the user's used capacity.
type UserCapacity struct {
	// The user's storage space. The unit is MB.
	// The default value is 0 which means unlimited.
	//+kubebuilder:validation:Minimum=0
	//+kubebuilder:default=0
	//+optional
	Storage int64 `json:"storage,omitempty"`

	// The user's number of objects.
	//+optional
	//+kubebuilder:validation:Minimum=0
	//+kubebuilder:default=0
	ObjectCount int64 `json:"objectCount,omitempty"`

	// The user's number of buckets.
	//+kubebuilder:validation:Minimum=0
	//+kubebuilder:default=0
	//+optional
	BucketCount int64 `json:"bucketNumber,omitempty"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// User is the Schema for the users API
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   UserSpec   `json:"spec,omitempty"`
	Status UserStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// UserList contains a list of User
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
