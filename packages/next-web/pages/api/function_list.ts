import { NextApiRequest, NextApiResponse } from "next";

import { JsonResp } from "./response";

export default async function handler(req: NextApiRequest, resp: NextApiResponse) {
  JsonResp(
    [
      {
        _id: "62da6670583927a711b311e2",
        name: "admin-create__5YAAoenl",
        code: "import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\nconst db = cloud.database()\n\nexports.main = async function (ctx: FunctionContext) {\n  const uid = ctx.auth?.uid\n  if (!uid) {\n    return 'Unauthorisszssed'\n  }\n\n  // 权限验证\n  const code = await checkPermission(uid, 'admin.create')\n  if (code) {\n    return 'Permission denied'\n  }\n\n  const { username, password, avatar, name, roles } = ctx.body\n  if (!username || !password) {\n    return 'username or password cannot be empty'\n  }\n\n  // 验证用户是否已存在\n  const { total } = await db.collection('admins').where({ username }).count()\n  if (total > 0) {\n    return 'username already exists'\n  }\n\n  // 验证 roles 是否合法\n  const { total: valid_count } = await db.collection('roles')\n    .where({\n      name: db.command.in(roles)\n    }).count()\n\n  if (valid_count !== roles.length) {\n    return 'invalid roles'\n  }\n\n  // add admin\n  const r = await db.collection('admins')\n    .add({\n      username,\n      name: name ?? null,\n      avatar: avatar ?? null,\n      roles: roles ?? [],\n      password: hashPassword(password),\n      created_at: Date.now(),\n      updated_at: Date.now()\n    })\n\n  return {\n    ...r,\n    uid: r.id\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
        label: "Admin: 创建管理员",
        hash: "c6a7fb39f762297a30c8e96391b4e4ac",
        tags: ["后台管理"],
        description: "",
        enableHTTP: true,
        status: 1,
        triggers: [],
        debugParams:
          '{"username":"laf","password":"laf","avatar":"avatar","name":"lalala","roles":["superadmin"]}',
        version: 12,
        created_at: "2022-07-22T08:57:19.017Z",
        updated_at: "2022-08-18T10:01:06.184Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da1bdb583927a711b311af",
        name: "admin-edit",
        code: "import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nconst db = cloud.database()\n\nexports.main = async function (ctx: FunctionContext) {\n\n  const uid = ctx.auth?.uid\n  if (!uid) return { code: '401', error: '未授ssdsd权访问' }\n\n  // 权限验证\n  const code = await checkPermission(uid, 'admin.edit')\n  if (code) {\n    return { code: '403', error: 'Permission denied' }\n  }\n\n  // 参数验证\n  const { _id, username, password, avatar, name, roles } = ctx.body\n  if (!_id) {\n    return { code: 'INVALID_PARAM', error: 'admin id cannot be empty' }\n  }\n\n  // 验证 user _id 是否合法\n  const { data: admin } = await db.collection('admins').where({ _id: _id }).getOne()\n  if (!admin) {\n    return { code: 'INVALID_PARAM', error: 'user not exists' }\n  }\n\n  // 验证 roles 是否合法\n  const { total: valid_count } = await db.collection('roles')\n    .where({\n      name: db.command.in(roles)\n    }).count()\n\n  if (valid_count !== roles.length) {\n    return { code: 'INVALID_PARAM', error: 'invalid roles' }\n  }\n\n  const old = admin\n\n  // update admim\n  const data = { updated_at: Date.now() }\n\n  // update password\n  if (password) {\n    data['password'] = hashPassword(password)\n  }\n\n  // username\n  if (username && username != old.username) {\n    const { total } = await db.collection('admins').where({ username }).count()\n    if (total) return { code: 'INVALID_PARAM', error: 'username already exists' }\n    data['username'] = username\n  }\n\n  // avatar\n  if (avatar && avatar != old.avatar) {\n    data['avatar'] = avatar\n  }\n\n  // name\n  if (name && name != old.name) {\n    data['name'] = name\n  }\n\n  // roles\n  if (roles) {\n    data['roles'] = roles\n  }\n\n  console.log(_id, data)\n  const r = await db.collection('admins')\n    .where({ _id: _id })\n    .update(data)\n\n  return {\n    code: 0,\n    data: { ...r, _id }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
        label: "Admin: 编辑管理员",
        hash: "0797d7d9ec5179875226bb24e17009f0",
        tags: ["后台管理"],
        description: "",
        enableHTTP: true,
        status: 1,
        triggers: [],
        debugParams:
          '{"_id":"616fb53f91881afb7d3f609f","username":"admin","password":"123456","name":"lalala","roles":["superadmin"]}',
        version: 9,
        created_at: "2022-07-22T03:39:05.773Z",
        updated_at: "2022-08-18T09:58:58.715Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da6670583927a711b311e3",
        name: "admin-edit__SAj9WsnP",
        code: "import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nconst db = cloud.database()\n\nexports.main = async function (ctx: FunctionContext) {\n\n  const uid = ctx.auth?.uid\n  if (!uid) return { code: '401', error: '未授权访问' }\n\n  // 权限验证\n  const code = await checkPermission(uid, 'admin.edit')\n  if (code) {\n    return { code: '403', error: 'Permission denied' }\n  }\n\n  // 参数验证\n  const { _id, username, password, avatar, name, roles } = ctx.body\n  if (!_id) {\n    return { code: 'INVALID_PARAM', error: 'admin id cannot be empty' }\n  }\n\n  // 验证 user _id 是否合法\n  const { data: admin } = await db.collection('admins').where({ _id: _id }).getOne()\n  if (!admin) {\n    return { code: 'INVALID_PARAM', error: 'user not exists' }\n  }\n\n  // 验证 roles 是否合法\n  const { total: valid_count } = await db.collection('roles')\n    .where({\n      name: db.command.in(roles)\n    }).count()\n\n  if (valid_count !== roles.length) {\n    return { code: 'INVALID_PARAM', error: 'invalid roles' }\n  }\n\n  const old = admin\n\n  // update admim\n  const data = { updated_at: Date.now() }\n\n  // update password\n  if (password) {\n    data['password'] = hashPassword(password)\n  }\n\n  // username\n  if (username && username != old.username) {\n    const { total } = await db.collection('admins').where({ username }).count()\n    if (total) return { code: 'INVALID_PARAM', error: 'username already exists' }\n    data['username'] = username\n  }\n\n  // avatar\n  if (avatar && avatar != old.avatar) {\n    data['avatar'] = avatar\n  }\n\n  // name\n  if (name && name != old.name) {\n    data['name'] = name\n  }\n\n  // roles\n  if (roles) {\n    data['roles'] = roles\n  }\n\n  console.log(_id, data)\n  const r = await db.collection('admins')\n    .where({ _id: _id })\n    .update(data)\n\n  return {\n    code: 0,\n    data: { ...r, _id }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
        label: "Admin: 编辑管理员",
        hash: "f7d31a0d2b2aba882c9b94d1a6063be7",
        tags: ["后台管理"],
        description: "",
        enableHTTP: true,
        status: 1,
        triggers: [],
        debugParams:
          '{"_id":"616fb53f91881afb7d3f609f","username":"admin","password":"123456","name":"lalala","roles":["superadmin"]}',
        version: 4,
        created_at: "2022-07-22T08:57:19.060Z",
        updated_at: "2022-07-22T08:57:19.060Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da1bdb583927a711b311b0",
        name: "admin-getinfo",
        code: "import cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n  const uid = ctx.auth?.uid\n  if (!uid) return { code: 'NO_AUTH', error: \"permission denied\" }\n\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n  delete admin['password']\n  const { permissions } = await getPermissions(admin._id)\n\n  return {\n    error_code: \"0\",\n    data: {\n      ...admin,\n      permissions\n    }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}",
        label: "Admin: 获取管理员信息",
        hash: "a6926d3662f6c97a3428b6821f68107d",
        tags: ["后台管理"],
        description: "",
        enableHTTP: true,
        status: 1,
        triggers: [],
        debugParams: '{"code":"laf"}',
        version: 2,
        created_at: "2022-07-22T03:39:05.864Z",
        updated_at: "2022-07-22T03:39:05.864Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da6670583927a711b311e4",
        name: "admin-getinfo__SY1PgEq7",
        code: "import cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n  const uid = ctx.auth?.uid\n  if (!uid) return { code: 'NO_AUTH', error: \"permission denied\" }\n\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n  delete admin['password']\n  const { permissions } = await getPermissions(admin._id)\n\n  return {\n    error_code: \"0\",\n    data: {\n      ...admin,\n      permissions\n    }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}",
        label: "Admin: 获取管理员信息",
        hash: "a6926d3662f6c97a3428b6821f68107d",
        tags: ["后台管理"],
        description: "",
        enableHTTP: true,
        status: 1,
        triggers: [],
        debugParams: '{"code":"laf"}',
        version: 2,
        created_at: "2022-07-22T08:57:19.183Z",
        updated_at: "2022-07-22T08:57:19.183Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da1bdb583927a711b311b1",
        name: "admin-login",
        code: "\n\nimport cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n\n  const { username, password } = ctx.body\n  if (!username || !password)\n    return { code: 'INVALID_PARAM', error: \"账号和密码不可为空\" }\n\n  const { data: admin} = await db.collection('admins')\n    .where({ username, password: hashPassword(password) })\n    .getOne()\n\n  if (!admin)\n    return { code: 'INVALID_PARAM', error: \"账号或密码错误\" }\n\n  // 默认 token 有效期为 7 天\n  const expire = Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7\n  const payload = {\n    uid: admin._id,\n    type: 'admin',\n    exp: expire\n  }\n\n  const access_token = cloud.getToken(payload)\n  return {\n    code: 0,\n    data: {\n      access_token,\n      uid: admin._id,\n      expire\n    }\n  }\n}\n\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
        label: "Admin: 管理员登陆",
        hash: "784ca5db40f43ba5e264428e807ea542",
        tags: ["后台管理"],
        description: "",
        enableHTTP: true,
        status: 1,
        triggers: [],
        debugParams: '{\n  "code": "laf"\n}',
        version: 5,
        created_at: "2022-07-22T03:39:05.957Z",
        updated_at: "2022-07-22T03:39:05.957Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da6670583927a711b311e5",
        name: "admin-login__vYRRdZQO",
        code: "\n\nimport cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n\n  const { username, password } = ctx.body\n  if (!username || !password)\n    return { code: 'INVALID_PARAM', error: \"账号和密码不可为空\" }\n\n  const { data: admin} = await db.collection('admins')\n    .where({ username, password: hashPassword(password) })\n    .getOne()\n\n  if (!admin)\n    return { code: 'INVALID_PARAM', error: \"账号或密码错误\" }\n\n  // 默认 token 有效期为 7 天\n  const expire = Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7\n  const payload = {\n    uid: admin._id,\n    type: 'admin',\n    exp: expire\n  }\n\n  const access_token = cloud.getToken(payload)\n  return {\n    code: 0,\n    data: {\n      access_token,\n      uid: admin._id,\n      expire\n    }\n  }\n}\n\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
        label: "Admin: 管理员登陆",
        hash: "784ca5db40f43ba5e264428e807ea542",
        tags: ["后台管理"],
        description: "",
        enableHTTP: true,
        status: 1,
        triggers: [],
        debugParams: '{\n  "code": "laf"\n}',
        version: 5,
        created_at: "2022-07-22T08:57:19.275Z",
        updated_at: "2022-07-22T08:57:19.275Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da1bdb583927a711b311b2",
        name: "aliyun-sms-service",
        code: "\nimport cloud from '@/cloud-sdk'\n\n/**\n * @body phone string 手机号\n * @body code string | number 验证码\n */\nexports.main = async function (ctx) {\n  // 加载短信配置\n  const config = await loadAliSmsConfigs()\n\n  const phone = ctx.body?.phone\n  if (!phone) {\n    return { code: 'INVALID_PARAM', error: 'invalid phone' }\n  }\n  const code = ctx.body?.code\n  if (!code) {\n    return { code: 'INVALID_PARAM', error: 'invalid code' }\n  }\n\n  const params = {\n    AccessKeyId: config.accessKeyId,\n    AccessKeySecret: config.accessKeySecret,\n    ApiEntryPoint: config.api_entrypoint,\n    Action: 'SendSms',\n    Version: '2017-05-25',\n    PhoneNumbers: phone,\n    SignName: config.signName,\n    TemplateCode: config.templateCode,\n    TemplateParam: `{\"code\": ${code}}`\n  }\n\n  const data = await cloud.invoke('invoke-aliyun-api', { body: params })\n  console.log(data)\n\n  return {\n    code: 0,\n    data: data\n  }\n}\n\n\n\n/**\n * 加载阿里云短信配置\n */\nasync function loadAliSmsConfigs() {\n  const db = cloud.database()\n  const { data: config } = await db.collection('sys_config')\n    .where({ key: 'alisms' })\n    .getOne()\n\n  const value = config?.value\n\n  if (!value) {\n    throw new Error('加载短信配置失败，是否配置？')\n  }\n\n  return {\n    accessKeyId: value?.accessKeyId,          // 阿里云访问 Key ID\n    accessKeySecret: value?.accessKeySecret,  // 阿里云访问 Key Secret\n    api_entrypoint: value?.api_entrypoint ?? 'https://dysmsapi.aliyuncs.com',\n    signName: value?.signName,          // 短信签名，修改为你的签名，如: \"灼灼信息\"\n    templateCode: value?.templateCode   // 短信模板ID，如 'SMS_217850726'\n  }\n}",
        label: "Service: 短信服务",
        hash: "2f111560f9c5eb2dbca096eccd066ff7",
        tags: ["服务"],
        description: "阿里云通信-发短信内部调用服务，不开启外网访问",
        enableHTTP: false,
        status: 1,
        triggers: [],
        debugParams: '{\n  "phone": "13184211245",\n  "code": "1234"\n}',
        version: 7,
        created_at: "2022-07-22T03:39:06.062Z",
        updated_at: "2022-07-22T03:39:06.062Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da6670583927a711b311e6",
        name: "aliyun-sms-service__QLbAXYw3",
        code: "\nimport cloud from '@/cloud-sdk'\n\n/**\n * @body phone string 手机号\n * @body code string | number 验证码\n */\nexports.main = async function (ctx) {\n  // 加载短信配置\n  const config = await loadAliSmsConfigs()\n\n  const phone = ctx.body?.phone\n  if (!phone) {\n    return { code: 'INVALID_PARAM', error: 'invalid phone' }\n  }\n  const code = ctx.body?.code\n  if (!code) {\n    return { code: 'INVALID_PARAM', error: 'invalid code' }\n  }\n\n  const params = {\n    AccessKeyId: config.accessKeyId,\n    AccessKeySecret: config.accessKeySecret,\n    ApiEntryPoint: config.api_entrypoint,\n    Action: 'SendSms',\n    Version: '2017-05-25',\n    PhoneNumbers: phone,\n    SignName: config.signName,\n    TemplateCode: config.templateCode,\n    TemplateParam: `{\"code\": ${code}}`\n  }\n\n  const data = await cloud.invoke('invoke-aliyun-api', { body: params })\n  console.log(data)\n\n  return {\n    code: 0,\n    data: data\n  }\n}\n\n\n\n/**\n * 加载阿里云短信配置\n */\nasync function loadAliSmsConfigs() {\n  const db = cloud.database()\n  const { data: config } = await db.collection('sys_config')\n    .where({ key: 'alisms' })\n    .getOne()\n\n  const value = config?.value\n\n  if (!value) {\n    throw new Error('加载短信配置失败，是否配置？')\n  }\n\n  return {\n    accessKeyId: value?.accessKeyId,          // 阿里云访问 Key ID\n    accessKeySecret: value?.accessKeySecret,  // 阿里云访问 Key Secret\n    api_entrypoint: value?.api_entrypoint ?? 'https://dysmsapi.aliyuncs.com',\n    signName: value?.signName,          // 短信签名，修改为你的签名，如: \"灼灼信息\"\n    templateCode: value?.templateCode   // 短信模板ID，如 'SMS_217850726'\n  }\n}",
        label: "Service: 短信服务",
        hash: "2f111560f9c5eb2dbca096eccd066ff7",
        tags: ["服务"],
        description: "阿里云通信-发短信内部调用服务，不开启外网访问",
        enableHTTP: false,
        status: 1,
        triggers: [],
        debugParams: '{\n  "phone": "13184211245",\n  "code": "1234"\n}',
        version: 7,
        created_at: "2022-07-22T08:57:19.357Z",
        updated_at: "2022-07-22T08:57:19.357Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
      {
        _id: "62da1bdb583927a711b311b3",
        name: "app-login-password",
        code: "import * as crypto from 'crypto'\nimport cloud from '@/cloud-sdk'\n\n/**\n * @body username string 用户名，即手机号\n * @body password string 密码\n */\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n\n  // 参数验证\n  const { username, password } = ctx.body\n  if (!username || !password) {\n    return { code: 'INVALID_PARAM', error: '用户名或密码不可为空' }\n  }\n\n  // 验证用户名与密码是否正确\n  const { data: user } = await db.collection('biz_user')\n    .where({\n      username,\n      password: hashPassword(password)\n    })\n    .getOne()\n\n  if (!user)\n    return { code: 'INVALID_PARAM', error: '用户名或密码不正确' }\n\n  // 默认 token 有效期为 7 天\n  const expire = Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7\n  const access_token = cloud.getToken({\n    uid: user._id,\n    exp: expire\n  })\n\n  delete user['password']\n\n  return {\n    code: 0,\n    data: { access_token, user, expire }\n  }\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
        label: "App: 用户名+密码登陆",
        hash: "0e24fa405b9fcaac4a57abc329f7dd68",
        tags: ["用户", "App"],
        description: "App: 用户名+密码登陆",
        enableHTTP: true,
        status: 1,
        triggers: [],
        debugParams: '{"username":"18758887214","password":"123456"}',
        version: 15,
        created_at: "2022-07-22T03:39:06.080Z",
        updated_at: "2022-08-20T04:03:49.305Z",
        created_by: "62da1b79f631f388462444d3",
        appid: "kixjnr",
      },
    ],

    resp,
  );
}
