{"meta":{"name":"basic_template"},"functions":[{"label":"后台管理-创建管理员","name":"admin-create","description":"","enableHTTP":true,"status":1,"tags":["后台管理","预置"],"code":"import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\nconst db = cloud.database()\n\nexports.main = async function (ctx) {\n  const uid = ctx.auth?.uid\n  if (!uid) {\n    return 'Unauthorized'\n  }\n\n  // 权限验证\n  const code = await checkPermission(uid, 'admin.create')\n  if (code) {\n    return 'Permission denied'\n  }\n\n  const { username, password, avatar, name, roles } = ctx.body\n  if (!username || !password) {\n    return 'username or password cannot be empty'\n  }\n\n  // 验证用户是否已存在\n  const { total } = await db.collection('admins').where({ username }).count()\n  if (total > 0) {\n    return 'username already exists'\n  }\n\n  // 验证 roles 是否合法\n  const { total: valid_count } = await db.collection('roles')\n    .where({\n      name: db.command.in(roles)\n    }).count()\n\n  if (valid_count !== roles.length) {\n    return 'invalid roles'\n  }\n\n  // add admin\n  const r = await db.collection('admins')\n    .add({\n      username,\n      name: name ?? null,\n      avatar: avatar ?? null,\n      roles: roles ?? [],\n      created_at: Date.now(),\n      updated_at: Date.now()\n    })\n\n  // add admin password\n  await db.collection('password')\n    .add({\n      uid: r.id,\n      password: hashPassword(password),\n      type: 'login',\n      created_at: Date.now(),\n      updated_at: Date.now()\n    })\n\n  return {\n    ...r,\n    uid: r.id\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n"},{"label":"后台管理-编辑管理员","name":"admin-edit","description":"","enableHTTP":true,"status":1,"tags":["后台管理","预置"],"code":"import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nconst db = cloud.database()\n\nexports.main = async function (ctx) {\n  console.log(ctx)\n\n  const uid = ctx.auth?.uid\n  if (!uid) {\n    return 'Unauthorized'\n  }\n\n  // 权限验证\n  const code = await checkPermission(uid, 'admin.edit')\n  if (code) {\n    return 'Permission denied'\n  }\n\n  // 参数验证\n  const { _id, username, password, avatar, name, roles } = ctx.body\n  if (!_id) {\n    return 'admin id cannot be empty'\n  }\n\n  // 验证 user _id 是否合法\n  const { data: admins } = await db.collection('admins').where({ _id: _id }).get()\n  if (!admins || !admins.length) {\n    return 'user not exists'\n  }\n\n  // 验证 roles 是否合法\n  const { total: valid_count } = await db.collection('roles')\n    .where({\n      name: db.command.in(roles)\n    }).count()\n\n  if (valid_count !== roles.length) {\n    return 'invalid roles'\n  }\n\n  // update password\n  if (password) {\n    await db.collection('password')\n      .where({ uid: _id })\n      .update({\n        password: hashPassword(password),\n        updated_at: Date.now()\n      })\n  }\n\n  const old = admins[0]\n\n  // update admim\n  const data = {\n    updated_at: Date.now()\n  }\n\n  // username\n  if (username && username != old.username) {\n    const { total } = await db.collection('admins').where({ username }).count()\n    if (total) {\n      return 'username already exists'\n    }\n    data['username'] = username\n  }\n\n  // avatar\n  if (avatar && avatar != old.avatar) {\n    data['avatar'] = avatar\n  }\n\n  // name\n  if (name && name != old.name) {\n    data['name'] = name\n  }\n\n  // roles\n  if (roles) {\n    data['roles'] = roles\n  }\n\n  console.log(_id, data)\n  const r = await db.collection('admins')\n    .where({ _id: _id })\n    .update(data)\n\n  return {\n    ...r,\n    _id\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n"},{"label":"后台管理-获取管理员信息","name":"admin-getinfo","description":"","enableHTTP":true,"status":1,"tags":["后台管理","预置"],"code":"import cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx) {\n  const db = cloud.database()\n  const uid = ctx.auth?.uid\n  if (!uid) {\n    return 'Unauthorized'\n  }\n\n  //\n  const ret = await db.collection('admins')\n    .where({ _id: uid })\n    .get()\n\n  if (!ret.ok || !ret.data.length) {\n    return 'query admin error'\n  }\n\n  const admin = ret.data[0]\n\n  const { permissions } = await getPermissions(admin._id)\n\n  return {\n    ...admin,\n    permissions\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}"},{"label":"后台管理-管理员登陆","name":"admin-login","description":"","enableHTTP":true,"status":1,"tags":["后台管理","预置","登陆"],"code":"import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nexports.main = async function (ctx) {\n  const db = cloud.database()\n  const { username, password } = ctx.body\n\n  if (!username || !password) {\n    return '用户密码不正确'\n  }\n\n  const ret = await db.collection('admins')\n    .withOne({\n      query: db\n        .collection('password')\n        .where({ password: hashPassword(password), type: 'login' }),\n      localField: '_id',\n      foreignField: 'uid'\n    })\n    .where({ username })\n    .merge({ intersection: true })\n\n  if (ret.ok && ret.data.length) {\n    const admin = ret.data[0]\n\n    // 默认 token 有效期为 7 天\n    const expire = Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7\n    const payload = {\n      uid: admin._id,\n      type: 'admin',\n      exp: expire\n    }\n    const access_token = cloud.getToken(payload)\n\n    return {\n      access_token,\n      username,\n      uid: admin._id,\n      expire\n    }\n  }\n\n  return 'invalid username or password'\n}\n\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n"},{"label":"aliyun-sms-service","name":"aliyun-sms-service","description":"阿里云通信-发短信内部调用服务，不开启外网访问","enableHTTP":false,"status":0,"debugParams":"{\n  \"phone\": \"13184211245\",\n  \"code\": \"1234\"\n}","tags":["预置","阿里云"],"code":"\nimport cloud from '@/cloud-sdk'\nimport { v4 as uuidv4 } from 'uuid'\nimport * as crypto from 'crypto'\nimport * as querystring from 'querystring'\n\n\n// 你可以让一个云函数监听 `app.ready` 触发器事件，初始化必要的配置信息(cloud.shared）\nconst config = cloud.shared.get('aliyun.sms.config')\n\nconst accessKeyId = config.accessKeyId  // 阿里云访问 Key ID\nconst accessKeySecret = config.accessKeySecret  // 阿里云访问 Key Secret\nconst api_entrypoint = config.api_entrypoint ?? 'https://dysmsapi.aliyuncs.com'\nconst signName = config.signName   // 短信签名，修改为你的签名，如: \"灼灼信息\"\nconst templateCode = config.templateCode  // 短信模板ID，修改为你的模板ID，如 'SMS_217850726'\n\n/**\n * @body phone string 手机号\n * @body code string | number 验证码\n */\n exports.main = async function (ctx) {\n  const phone = ctx.body?.phone\n  if (!phone) {\n    return 'error: invalid phone'\n  }\n  const code = ctx.body?.code\n  if (!code) {\n    return 'error: invalid code'\n  }\n\n  const params = sortObjectKeys({\n    AccessKeyId: accessKeyId,\n    Action: 'SendSms',\n    Format: 'json',\n    SignatureMethod: 'HMAC-SHA1',\n    SignatureNonce: uuidv4(),\n    SignatureVersion: '1.0',\n    Version: '2017-05-25',\n    Timestamp: (new Date()).toISOString(),\n    PhoneNumbers: phone,\n    SignName: signName,\n    TemplateCode: templateCode,\n    TemplateParam: `{\"code\": ${code}}`\n  })\n\n  params['Signature'] = specialEncode(sign(params))\n\n  const query = querystring.stringify(params)\n  const url = `${api_entrypoint}?${query}`\n\n  try {\n    const r = await cloud.fetch(url)\n    console.log(r.data)\n    if(r.data?.Code === 'OK')\n      return 'ok'\n    else\n      return r.data\n\n  } catch (err) {\n    console.log(err)\n    return 'error: ' + err\n  }\n}\n// 签名\nfunction sign(raw_params) {\n  const params = encode(raw_params)\n\n  //拼接strToSign\n  let strToSign = '';\n  for (let i in params) {\n    strToSign += i + '=' + params[i] + '&';\n  }\n  strToSign = strToSign.substr(0, strToSign.length - 1);\n  strToSign = \"GET&\" + encodeURIComponent('/') + '&' + encodeURIComponent(strToSign);\n\n  // 阿里云签名是要求 基于 hash 的原始二进制值 进行 base64编码\n  const ret = crypto.createHmac('sha1', accessKeySecret + '&')\n    .update(strToSign)\n    .digest('base64')\n\n  return ret\n}\n\n//对各个参数进行字典序升序排序\nfunction sortObjectKeys(obj) {\n  const tmp = {};\n  Object.keys(obj).sort().forEach(k => tmp[k] = obj[k])\n  return tmp;\n}\n\n\n//对排序之后的参数进行 uriencode + POP 编码\nfunction encode(params) {\n  const obj = {}\n  //对urlencode之后的特殊字符进行替换\n  for (let i in params) {\n    const str = encodeURIComponent(params[i])\n    obj[i] = specialEncode(str)\n  }\n  return obj\n}\n\n// 阿里云的特殊编码(POP编码)\nfunction specialEncode(encoded) {\n  if (encoded.indexOf('+')) {\n    encoded.replace(\"+\", \"%20\");\n  } else if (encoded.indexOf('*')) {\n    encoded.replace(\"*\", \"%2A\");\n  } else if (encoded.indexOf('%7E')) {\n    encoded.replace(\"%7E\", \"~\");\n  }\n  return encoded\n}\n"},{"label":"email-sender-service","name":"email-sender-service","description":"","enableHTTP":false,"status":0,"tags":["预置"],"code":"\nimport cloud from '@/cloud-sdk'\nimport * as nodemailer from 'nodemailer'\nimport * as assert from 'assert'\n\nexports.main = async function (ctx) {\n  const body = ctx.body\n  const db = cloud.database()\n  const CONFIG = cloud.shared.get('sys.config.mail')\n  assert.ok(CONFIG, 'no mail config found')\n\n  const transporter = nodemailer.createTransport({\n    host: CONFIG.host,\n    port: CONFIG.port,\n    secure: true, // true for 465, false for other ports\n    auth: {\n      user: CONFIG.user,\n      pass: CONFIG.pass,\n    },\n  })\n\n  // send mail with defined transport object\n  const info = await transporter.sendMail({\n    from: CONFIG.sender, // sender address\n    to: body.email, // list of receivers\n    subject: body.subject, // Subject line\n    text: body.text, // plain text body\n    // html: \"<b>Hello world?</b>\", // html body\n  })\n\n  console.log(info)\n\n  return info\n}\n"},{"label":"在服务端执行 shell 脚本","name":"exec_shell","description":"","enableHTTP":false,"status":0,"tags":["预置","scripts"],"code":"import * as child_process from 'child_process'\n\n/**\n * 可修改本函数，安装指定的依赖包。\n * 注意：\n * 0. 因客户端请求超时时间限制，函数可能在返回前请求超时，但该命令会继续运行，请知晓\n * 1. 不要开启本函数的 HTTP 访问（安全风险）\n * 2. 通常请保持本函数是停用状态（安全风险）\n */\n\nexports.main = async function (ctx) {\n  const r = child_process.execSync(\"npm i @types/nodemailer nodemailer\")\n  console.log(r.toString())\n  return 'ok'\n}\n"},{"label":"文件访问令牌","name":"file-token","description":"文件访问令牌","enableHTTP":true,"status":0,"tags":["预置"],"code":"import cloud from '@/cloud-sdk'\n\n/**\n * 本函数可发放文件访问令牌，用于下载或上传文件\n * @TODO 你可以修改本函数，以实现符合业务的文件访问授权逻辑\n * \n * @body {string} bucket 文件存储的名字空间，bucket = '*' 时代表可访问所有 bucket\n * @body {string} filename 文件名，可选的，如不提供则代表可访问所有文件\n * @body {string[]} ops 授权的操作权限，取值为之一或多个： \"read\" | \"create\" | \"delete\" | \"list\"\n * @body {number} expire 令牌有效期，单位为秒，默认为一小时，即 3600\n */\n\nexports.main = async function (ctx) {\n  const uid = ctx.auth?.uid\n  if (!uid) return 'error: unauthorized'\n\n  const bucket = ctx.body?.bucket\n  const filename = ctx.body?.filename ?? undefined\n  const ops = ctx.body?.ops ?? ['read']\n  const expire = ctx.body?.expire ?? 3600\n\n  if (!bucket) {\n    return 'error: invalid bucket'\n  }\n\n  const exp = Math.floor(Date.now() / 1000) + expire\n  const payload = { bucket, filename, exp, ops }\n\n  return cloud.getToken(payload)\n}\n"},{"label":"初始化应用 RBAC 数据","name":"init-app-rbac","description":"初始化一个经典的 RBAC，包括基础的权限、角色、初始管理员","enableHTTP":false,"status":1,"tags":["初始化","预置"],"code":"/**\n * 本函数可用于初始化一套 RBAC 必要的数据，通常不需要删除此云函数，也不要开启 HTTP 调用。\n */\n\n import cloud from '@/cloud-sdk'\n import * as assert from 'assert'\n import * as crypto from 'crypto'\n const db = cloud.database()\n \n \n exports.main = async function (ctx) {\n   \n   // 创建 RBAC 初始权限\n   await createInitialPermissions()\n \n   // 创建 RBAC 初始角色\n   await createFirstRole()\n \n   // 创建初始管理员\n   await createFirstAdmin(\"admin\", \"123456\")\n   \n   return 'ok'\n }\n \n \n \n \n /**\n  * 预置 RBAC 权限\n  */\n  const permissions = [\n   { name: 'role.create', label: '创建角色' },\n   { name: 'role.read', label: '读取角色' },\n   { name: 'role.edit', label: '编辑角色' },\n   { name: 'role.delete', label: '删除角色' },\n \n   { name: 'permission.create', label: '创建权限' },\n   { name: 'permission.read', label: '读取权限' },\n   { name: 'permission.edit', label: '编辑权限' },\n   { name: 'permission.delete', label: '删除权限' },\n \n   { name: 'admin.create', label: '创建管理员' },\n   { name: 'admin.read', label: '获取管理员' },\n   { name: 'admin.edit', label: '编辑管理员' },\n   { name: 'admin.delete', label: '删除管理员' }\n ]\n \n \n \n // 创建初始管理员\n async function createFirstAdmin(username: string, password: string) {\n   try {\n \n     const { total } = await db.collection('admins').count()\n     if (total > 0) {\n       console.log('admin already exists')\n       return\n     }\n \n     await cloud.mongo.db.collection('admins').createIndex('username', { unique: true })\n \n     const { data } = await db.collection('roles').get()\n     const roles = data.map(it => it.name)\n \n     const r_add = await db.collection('admins').add({\n       username,\n       avatar: \"https://static.dingtalk.com/media/lALPDe7szaMXyv3NAr3NApw_668_701.png\",\n       name: 'Admin',\n       roles,\n       created_at: Date.now(),\n       updated_at: Date.now()\n     })\n     assert.ok(r_add.id, 'add admin occurs error')\n \n     await db.collection('password').add({\n       uid: r_add.id,\n       password: hashPassword(password),\n       type: 'login',\n       created_at: Date.now(),\n       updated_at: Date.now()\n     })\n \n     return r_add.id\n   } catch (error) {\n     console.error(error.message)\n   }\n }\n \n // 创建初始角色\n async function createFirstRole() {\n   try {\n \n     await cloud.mongo.db.collection('roles').createIndex('name', { unique: true })\n \n     const r_perm = await db.collection('permissions').get()\n     assert(r_perm.ok, 'get permissions failed')\n \n     const permissions = r_perm.data.map(it => it.name)\n \n     const r_add = await db.collection('roles').add({\n       name: 'superadmin',\n       label: '超级管理员',\n       description: '系统初始化的超级管理员',\n       permissions,\n       created_at: Date.now(),\n       updated_at: Date.now()\n     })\n \n     assert.ok(r_add.id, 'add role occurs error')\n \n     return r_add.id\n   } catch (error) {\n     if (error.code == 11000) {\n       return console.log('permissions already exists')\n     }\n \n     console.error(error.message)\n   }\n }\n \n // 创建初始权限\n async function createInitialPermissions() {\n \n   // 创建唯一索引\n   await cloud.mongo.db.collection('permissions').createIndex('name', { unique: true })\n \n   for (const perm of permissions) {\n     try {\n       const data = {\n         ...perm,\n         created_at: Date.now(),\n         updated_at: Date.now()\n       }\n       await db.collection('permissions').add(data)\n     } catch (error) {\n       if (error.code == 11000) {\n         console.log('permissions already exists')\n         continue\n       }\n       console.error(error.message)\n     }\n   }\n \n   return true\n }\n \n \n /**\n  * @param {string} content\n  * @return {string}\n  */\n function hashPassword(content: string): string {\n   return crypto\n     .createHash('sha256')\n     .update(content)\n     .digest('hex')\n }\n \n "},{"label":"应用初始化器","name":"initializer","description":"","enableHTTP":false,"reserved":true,"status":1,"tags":["初始化","预置"],"triggers":[{"name":"监听应用启动就绪事件","type":"event","event":"App:ready","desc":"","status":1,"_id":"613a347c1ce6a2f7b5d49c16"}],"code":"/**\n * 本函数会默认创建 'App:ready' 事件触发器，应用启动并初始化完成后被自动调用。\n * \n * 本函数可用于初始化应用必要的一些配置、数据，通常不需要删除此云函数，也不要开启 HTTP 调用。\n */\n\nimport cloud from '@/cloud-sdk'\nconst db = cloud.database()\n\n\nexports.main = async function (ctx) {\n\n  const r = await cloud.invoke('init-app-rbac', {})\n  console.log(r.logs)\n  if (r.data === 'ok') {\n    console.log('init rbac: ok')\n  }\n\n  return 'ok'\n}\n\n\n"},{"label":"injector-admin","name":"injector-admin","description":"","enableHTTP":false,"status":1,"tags":["预置","injector"],"code":"import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\n/**\n * 本函数为 policy injector， 当用户请求 proxy/:policy 时，会调用本函数返回的函数获取该策略的 injections。\n * 返回的 injections 会注入到该策略规则中执行。\n * 例如，本例中返回了 $has 和 $is 函数，则在规则中可以这样使用：\n * ```json\n * {\n *   \"add\": \"$has('article.create')\",\n *   \"remove\": \"$is('admin')\"\n * }\n * ```\n */\n\nexports.main = async function (ctx) {\n\n  return async function (payload: any, params: any) {\n    const auth = payload || {}\n    const { permissions, roles } = await getPermissions(auth.uid)\n    return {\n      ...auth,\n      $has: (permissionName) => {\n        return permissions.includes(permissionName)\n      },\n      $is: (roleName) => {\n        return roles.includes(roleName)\n      }\n    }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n"},{"label":"发送登陆验证码","name":"send-login-smscode","description":"发送登陆短信验证码","enableHTTP":true,"status":0,"debugParams":"{\n  \"phone\": \"13184211245\"\n}","tags":["预置"],"code":"import cloud from '@/cloud-sdk'\n\n/**\n * @api\n * @body phone string 手机号\n */\n\n// main function\n exports.main = async function (ctx) {\n  const db = cloud.database()\n  const phone = ctx.body?.phone\n  if (!phone) {\n    return 'Error: invalid phone'\n  }\n\n  const code = Math.min(Math.floor(1000 + Math.random() * 9000), 9999)\n\n  const r = await sendSMSCode(phone, code)\n  if (r.data === 'ok') {\n    await db.collection('verify_code').add({\n      type: 'sms',\n      phone,\n      code,\n      event: 'login',\n      created_at: Date.now()\n    })\n  }\n  return r\n}\n\n/**\n * 发送验证码\n * @return {Promise<string>}\n * @see cloud function: aliyun-sms-service\n */\nasync function sendSMSCode(phone, code) {\n  const body =  { phone, code }\n  const r = await cloud.invoke('aliyun-sms-service', { body })\n  return r\n}\n\n"},{"label":"测试","name":"test","description":"","enableHTTP":true,"status":1,"tags":["预置"],"code":"import cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx) {\n  console.log(ctx)\n  \n  return 'ok'\n}\n"},{"label":"用户密码登陆","name":"user-passwd-login","description":"用户密码登陆","enableHTTP":true,"status":1,"debugParams":"{\n  \"username\": \"less\",\n  \"password\": \"less123\"\n}","tags":["预置"],"code":"import * as crypto from 'crypto'\nimport cloud from '@/cloud-sdk'\n/**\n * @body username string 用户名\n * @body password string 密码\n */\n exports.main = async function (ctx) {\n  const db = cloud.database()\n\n  // 参数验证\n  const { username, password } = ctx.body\n  if (!username || !password) {\n    return { code: 1, error: 'invalid phone or password' }\n  }\n\n  // 验证用户名是否存在\n  const { data: user } = await db.collection('users')\n    .where({ username })\n    .getOne()\n\n  if (!user) {\n    return {code: 1, error: 'invalid username or password'}\n  }\n\n  // 验证密码是否正确\n  const ret = await db.collection('password')\n    .where({ uid: user._id, password: hashPassword(password), type: 'login' })\n    .count()\n\n  if (ret.total > 0) {\n\n    // 默认 token 有效期为 7 天\n    const expire = Math.floor(Date.now() / 1000) + 60 * 60  * 24 * 7\n    const payload = {\n      uid: user._id,\n      type: 'user',\n      exp: expire\n    }\n    const access_token = cloud.getToken(payload)\n    return {\n      code: 0,\n      data: {\n        access_token,\n        user,\n        uid: user._id,\n        expire\n      }\n    }\n  }\n\n  return { code: 1, error: 'invalid username or password' }\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content) {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n"},{"label":"用户密码注册","name":"user-password-register","description":"用户密码注册","enableHTTP":true,"status":1,"debugParams":"{\"username\":\"less\",\"password\":\"less123\"}","tags":["预置"],"code":"import * as crypto from 'crypto'\nimport cloud from '@/cloud-sdk'\n/**\n * @body username string 用户名\n * @body password string 密码\n */\n exports.main = async function (ctx) {\n  const db = cloud.database()\n\n  // 参数验证\n  const { username, password } = ctx.body\n  if (!username|| !password) {\n    return { code: 1, error: 'invalid username or password' }\n  }\n\n  // 检查用户名是否已存在\n  const r_count = await db.collection('users')\n    .where({ username })\n    .count()\n\n  if (r_count.total > 0) {\n    return { code: 1, error: `${username} already exists` }\n  }\n\n  // 创建 user\n  const r = await db.collection('users').add({\n    username,\n    created_at: Date.now(),\n    updated_at: Date.now()\n  })\n\n  // 创建 user password\n  await db.collection('password').add({\n    uid: r.id,\n    password: hashPassword(password),\n    type: \"login\",\n    created_at: Date.now(),\n    updated_at: Date.now()\n  })\n\n\n  // 注册完成后自动登录，生成 token: 默认 token 有效期为 7 天\n  const expire = Math.floor(Date.now()) + 60 * 60 * 24 * 7\n  const payload = {\n    uid: r.id,\n    type: 'user',\n    exp: expire\n  }\n\n  const access_token = cloud.getToken(payload)\n  return {\n    code: 0,\n    data: {\n      access_token,\n      username,\n      uid: r.id,\n      expire\n    }\n  }\n}\n\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content) {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n\n\n"},{"label":"微信小程序登陆","name":"wx-mp-login","description":"微信小程序登陆","enableHTTP":true,"status":0,"tags":["预置"],"code":"import cloud from '@/cloud-sdk'\n\n// 你可以让一个云函数监听 `App:ready` 触发器事件，初始化必要的配置信息(cloud.shared)\nconst appid = cloud.shared.get('settings.wxmp.appid')     // 微信小程序 AppId\nconst appsecret = cloud.shared.get('settings.wxmp.appsecret')  // 微信小程序 AppSecret\n\n/**\n * @body string code\n * @returns \n */\nexports.main = async function (ctx) {\n  const db = cloud.database()\n\n\n  const { body } = ctx\n  const code = body.code\n\n  // 获取 openid\n  const openid = await getOpenId(code)\n  if (!openid) {\n    return 'invalid code'\n  }\n\n  // 根据 openid 获取新用户\n  let { data } = await db.collection('users')\n    .where({ openid })\n    .getOne()\n\n\n  // 如果用户不存在\n  if (!data) {\n    // 添加新用户\n    await db.collection('users')\n      .add({\n        openid,\n        created_at: Date.now(),\n        updated_at: Date.now()\n      })\n\n    const r = await db.collection('users')\n      .where({ openid })\n      .getOne()\n\n    data = r.data\n  }\n\n  // 生成 token\n  const expire = Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7\n  const token = cloud.getToken({ uid: data._id, exp: expire })\n  return {\n    uid: data._id,\n    access_token: token,\n    openid,\n    expire\n  }\n}\n\n/**\n * 获取 openid\n * @param {string} code Then auth code\n * @return {Promise<string>}\n */\nasync function getOpenId(code) {\n\n  const api_url = `https://api.weixin.qq.com/sns/jscode2session`\n  const param = `appid=${appid}&secret=${appsecret}&js_code=${code}&grant_type=authorization_code`\n\n  console.log('request url: ', `${api_url}?${param}`)\n\n  const res = await cloud.fetch(`${api_url}?${param}`)\n\n  console.log(res.data)\n  // { session_key: string; openid: string } \n\n  if (res.data.errcode > 0) {\n    return null\n  }\n\n  return res?.data?.openid\n}\n\n"}],"policies":[{"name":"admin","rules":{"admins":{"read":"$has('admin.read')","update":"$has('admin.edit')","add":"$has('admin.create')","remove":"$has('admin.delete')"},"permissions":{"read":"$has('permission.read')","update":"$has('permission.edit')","add":"$has('permission.create')","remove":{"condition":"$has('permission.delete')","query":{"name":{"required":true,"notExists":"/roles/permissions"}}},"count":"$has('permission.read')"},"roles":{"read":"$has('role.read')","update":"$has('role.edit')","add":"$has('role.create')","remove":{"condition":"$has('role.delete')","query":{"name":{"required":true,"notExists":"/admins/roles"}}}}},"status":1,"injector":"injector-admin"},{"name":"user","rules":{"users":{"read":"query._id === uid","update":"query._id === uid","add":"data.created_by === uid","count":"true"},"categories":{"read":true,"count":"true"},"articles":{"read":"query._id === uid","update":"query._id === uid","add":"data.created_by === uid","remove":"query._id === uid","count":"true"}},"status":1,"injector":null}]}
